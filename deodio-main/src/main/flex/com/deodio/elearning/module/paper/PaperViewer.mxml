<?xml version="1.0" encoding="utf-8"?>
<paper:IPaperViewer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:paper="com.deodio.elearning.module.paper.*" creationComplete="init()"
					addedToStage="bindStageEvents(event)" xmlns:ac="com.deodio.elearning.module.paper.page.ac.*"
					>
	
	<fx:Metadata> 
		<!--ResourceBundle("FlexPaper")-->
		[Event(name="onDocumentLoaded", type="com.deodio.elearning.libs.event.DocumentLoadedEvent")]
		[Event(name="onLoadingProgress", type="flash.events.ProgressEvent")]
		[Event(name="onDocumentLoadedError", type="flash.events.ErrorEvent")]
		[Event(name="onCurrPageChanged", type="com.deodio.elearning.libs.event.CurrentPageChangedEvent")]
		[Event(name="onDocumentLoading", type="flash.events.Event")]
		[Event(name="onExternalLinkClicked", type="com.deodio.elearning.libs.event.ExternalLinkClickedEvent")]
		[Event(name="onDocumentPrinted", type="com.deodio.elearning.libs.event.DocumentPrintedEvent")]
		[Event(name="onPageLoaded", type="com.deodio.elearning.libs.event.PageLoadedEvent")]
		[Event(name="onPageLoading", type="com.deodio.elearning.libs.event.PageLoadingEvent")]
		[Event(name="onErrorLoadingPage", type="com.deodio.elearning.libs.event.ErrorLoadingPageEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.deodio.elearning.libs.containers.slider.DHSlider;
			import com.deodio.elearning.libs.enum.FitModeEnum;
			import com.deodio.elearning.libs.enum.ViewModeEnum;
			import com.deodio.elearning.libs.event.ViewModeChangedEvent;
			import com.deodio.elearning.libs.skins.DCMButtonSkin;
			import com.deodio.elearning.libs.skins.DSliderSkin;
			import com.deodio.elearning.libs.skins.DTextInputSkin;
			import com.deodio.elearning.module.paper.page.ac.Viewer;
			
			import flash.display.StageDisplayState;
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.controls.sliderClasses.Slider;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.ButtonBarButton;
			import spark.events.IndexChangeEvent;
			
			private var _sliderUserChange:Boolean = false;
			
			public function init():void{
				this.SwfFile = "http://localhost:8080/deodio-main/resources/flex/assets/test/imf.swf";
				
			}
			
			public override function get viewer():Viewer{
				return paper1;
			}
			
			private function bindStageEvents(e:Event):void{
				stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
			}
			
			private function fullScreenRedraw(event:FullScreenEvent):void{
				txtSearch.enabled = !TrueFullScreenActive || this.stage.displayState == "fullScreenInteractive"; 
			}
			
//			private var _pwps:PleaseWaitPerformingSearch;
			private function onDownloadingSearchResultResultsHandler(event:Event):void{
//				if(_pwps==null){
//					_pwps = new PleaseWaitPerformingSearch(); 
//					_pwps.Message = ResourceUtil.getResource("PerformingSearchPleaseWait",resourceManager); 
//					PopUpManager.addPopUp(_pwps, viewer, true);
//					PopUpManager.centerPopUp(_pwps);
//					_pwps["bttnCancel"].addEventListener("click", function():void{_pwps = null;});
//				}
			}
			
			private function onDownloadSearchResultCompletedResultsHandler(event:Event):void{
//				PopUpManager.removePopUp(_pwps);
			}
			
//			private var _nmsr:NoMoreSearchResultsDialog;
			private function onNoMoreSearchResultsHandler(event:Event):void{
				//Alert.show ("No More search result");
//				if(_nmsr == null){
//					_nmsr = new NoMoreSearchResultsDialog();
//					_nmsr.MessageTitle = resourceManager.getString("FlexPaper", "Searchfinished");
//					_nmsr.Message = resourceManager.getString("FlexPaper", "Finishedsearching");
//					PopUpManager.addPopUp(_nmsr, viewer, true);
//					PopUpManager.centerPopUp(_nmsr);
//					_nmsr["bttnOk"].addEventListener("click", function():void{_nmsr = null;});
//				}
			}
			
			protected override function documentLoadedHandler(event:Event):void{
				lblProgress.visible = false;
				super.documentLoadedHandler(event);
			}
			
			protected override function pageLoadedEventHandler(event:Event):void{
				lblProgress.visible = false;
				super.pageLoadedEventHandler(event);
			}
			
			private function logoClickedEventHandler(event:Event):void{
				showInfo(event);			
			}
			
			protected override function papersLoadingHandler(event:Event):void{
				super.papersLoadingHandler(event);
			}
			
			protected override function pageLoadingEventHandler(event:Event):void{
				super.pageLoadingEventHandler(event);
			}
			
			private function sliderChange(slider:HSlider):void 
			{
				if(!paper1.BusyLoading && _sliderUserChange)
				{
					paper1.Zoom(slider.value);
				}
				
				_sliderUserChange = true;
			}		
			
			private function txtPctKeyDown(event:KeyboardEvent):void{
				if(event.keyCode == Keyboard.ENTER && txtPct.text.length>1 && !isNaN(Number(txtPct.text.replace("%","")))){
					paper1.Zoom(new Number(txtPct.text.replace("%",""))/100);
				}
			}
			
			private function txtSearchKeyDown(event:KeyboardEvent):void{
				if(event!=null && event.keyCode == Keyboard.ENTER && txtSearch.text.length>0){
					paper1.searchText(txtSearch.text);
				}
			}
			
			private function txtPageNumKeyDown(event:KeyboardEvent):void{
				if(event.keyCode == Keyboard.ENTER && txtPage.text.length>0 && !isNaN(Number(txtPage.text))){
					paper1.gotoPage(new Number(txtPage.text));
				}
			}
			
			protected override function onDocumentLoadingProgressHandler(event:ProgressEvent):void{
				lblProgress.text = String(Math.round(event.bytesLoaded/event.bytesTotal*100));
				super.onDocumentLoadingProgressHandler(event);
			}
			
			private function onScaleChanged(event:Event):void{
				txtPct.text = formatPct(paper1.Scale);
				_sliderUserChange = false;
				slidPctScale.value = Number(paper1.Scale);
			}
			
			public override function loadSwf(s:String):void{
				lblProgress.text = "";
				lblProgress.visible = true;
				super.loadSwf(s);
			}
			
			protected override function onViewModeChanged(event:ViewModeChangedEvent):void{
				txtPage.text = formatPageNumber(viewer.currPage);
				super.onViewModeChanged(event);
			}
			
			protected function formatPageNumber(n:Number):String{
				if(viewer.ViewMode == ViewModeEnum.TWOPAGE)	
					return viewer.currPage.toString() + "-" + (viewer.currPage+1).toString();
				else
					return n.toString();
			}
			public override function searchText(text:String):void{
				txtSearch.text = text;
				super.searchText(text);				
			}
			 			
			protected function bttnBarViewMode_changeHandler(event:IndexChangeEvent):void
			{
				if(event.newIndex==0)
					paper1.switchMode('Portrait');
				else if(event.newIndex==1)
					paper1.switchMode('TwoPage');
				else if(event.newIndex==2)
					paper1.switchMode('Tile');
				
			}
			
			
			/* protected function bttnBarPrint_changeHandler(event:IndexChangeEvent):void
			{
			var noActivation_btn:ButtonBarButton = bttnBarPrint.dataGroup.getElementAt(bttnBarPrint.selectedIndex) as ButtonBarButton;
			if(noActivation_btn!=null)
			noActivation_btn.selected = false;
			
			printPaper(event)
			} */
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="48">
		<s:VGroup width="100%" height="48" x="0" y="0" gap="0">
			<mx:HBox  width="100%" height="48" paddingTop="0" paddingLeft="0" backgroundColor="#292929" verticalCenter="0" horizontalCenter="0" verticalAlign="middle" horizontalAlign="center">
				<s:ToggleButton icon="@Embed('/assets/paper/singlepage.png')" tabIndex="2" click="paper1.switchMode(Viewer.InitViewMode);" selected="{paper1.ViewMode == Viewer.InitViewMode}" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}" width="30" height="100%" buttonMode="true" useHandCursor="true" skinClass="com.deodio.elearning.libs.skins.DCMButtonSkin"/>
				<!--s:ToggleButton icon="@Embed('/assets/paper/doublepage.png')" tabIndex="3" click="paper1.switchMode('TwoPage');" selected="{paper1.ViewMode == ViewModeEnum.TWOPAGE}" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}" width="30" height="100%" buttonMode="true" useHandCursor="true" skinClass="com.deodio.elearning.libs.skins.DCMButtonSkin"/-->
				<s:ToggleButton icon="@Embed('/assets/paper/tilepage.png')" tabIndex="4" click="paper1.switchMode('Tile');" selected="{paper1.ViewMode == ViewModeEnum.TILE}" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}" width="30" height="100%" buttonMode="true" useHandCursor="true" skinClass="com.deodio.elearning.libs.skins.DCMButtonSkin"/>
				<s:Group height="48">
					<s:Line width="26" y="11" rotation="90">
						<s:stroke>
							<s:SolidColorStroke
								color="0xd0d0d0" weight="1"/>
						</s:stroke>
					</s:Line>
				</s:Group>
				
				
				<s:ToggleButton id="bttnFitWidth" icon="@Embed('/assets/paper/fitwidth.png')" tabIndex="5"  click="paper1.fitWidth();bttnFitHeight.selected=false;" selected="{paper1.FitMode == FitModeEnum.FITWIDTH}" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}" label="宽度模式" width="100" height="100%" buttonMode="true" useHandCursor="true" skinClass="com.deodio.elearning.libs.skins.DCMcButtonSkin"/>
				<s:ToggleButton id="bttnFitHeight" icon="@Embed('/assets/paper/fitheight.png')" tabIndex="5" selected="{paper1.FitMode == FitModeEnum.FITHEIGHT}" click="paper1.fitHeight();bttnFitWidth.selected=false;" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}" label="高度模式" width="100" height="100%" buttonMode="true" useHandCursor="true" skinClass="com.deodio.elearning.libs.skins.DCMcButtonSkin"/>
				
				<s:Group height="48">
					<s:Line width="26" y="11" rotation="90">
						<s:stroke>
							<s:SolidColorStroke
								color="0xd0d0d0" weight="1"/>
						</s:stroke>
					</s:Line>
				</s:Group>
				
				
				<s:HSlider id="slidPctScale"  skinClass="com.deodio.elearning.libs.skins.DZoomSliderSkin"  mouseDown="_sliderUserChange=true" change="sliderChange(this.slidPctScale)"  liveDragging="true" snapInterval="{ZoomInterval}" minimum="{MinZoomSize}" maximum="{MaxZoomSize}" value="{Scale}" width="120" height="5" enabled="true"  tabIndex="6" visible="{ZoomToolsVisible}" includeInLayout="{ZoomToolsVisible}" />
				<s:TextInput skinClass="com.deodio.elearning.libs.skins.DTextInputSkin"   fontSize="11" height="30" width="40" id="txtPct" text="{formatPct(Scale)}" keyDown="txtPctKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT || (Viewer.ViewModeExtList.length>0 &amp;&amp; Viewer.ViewModeExtList[0].doZoom) }"  tabIndex="7" visible="{ZoomToolsVisible}" includeInLayout="{ZoomToolsVisible}" />
				<s:Image source="@Embed('/assets/player/playbar/zoomout_default.png')" buttonMode="true" click="toggleFullScreen();" tabIndex="8" visible="{ZoomToolsVisible}" includeInLayout="{ZoomToolsVisible}"/>
				
				<s:Group height="48">
					<s:Line width="26" y="11" rotation="90">
						<s:stroke>
							<s:SolidColorStroke
								color="0xd0d0d0" weight="1"/>
						</s:stroke>
					</s:Line>
				</s:Group>
				
				
				
				<s:Image source="@Embed('/assets/player/backward_btn.png')" buttonMode="true" click="viewer.mvPrev();" tabIndex="8" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}"/>
				<s:TextInput skinClass="com.deodio.elearning.libs.skins.DTextInputSkin"   fontSize="11" height="30" width="40" id="txtPage" text="{paper1.currPage}" keyDown="txtPageNumKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT||paper1.ViewMode == ViewModeEnum.TWOPAGE}" tabIndex="9" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}" />
				
				<mx:Canvas visible="{NavToolsVisible}" width="30" includeInLayout="{NavToolsVisible}" height="48" verticalCenter="0" horizontalCenter="0" verticalScrollPolicy="off">
					<s:Label fontSize="11" y="20" height="48" width="10" text="/" color="#ffffff"/>
					<s:Label fontSize="11" x="11" y="20" height="48" width="20" text="{paper1.numPages}" color="#ffffff"/>
				</mx:Canvas>
				<s:Image source="@Embed('/assets/player/forward_btn.png')" buttonMode="true" click="viewer.mvNext();" tabIndex="10" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}"/>
				
				<s:Group height="48">
					<s:Line width="26" y="11" rotation="90">
						<s:stroke>
							<s:SolidColorStroke
								color="0xd0d0d0" weight="1"/>
						</s:stroke>
					</s:Line>
				</s:Group>
				 
				
				<!--  selected="{!paper1.TextSelectEnabled}" -->
				<!--s:Image source="@Embed('/assets/paper/comment.png')" buttonMode="true" click="{paper1.TextSelectEnabled=true}" tabIndex="11" visible="{!ReadOnly &amp;&amp; CursorToolsVisible}" includeInLayout="{!ReadOnly &amp;&amp; CursorToolsVisible}" /-->
				<!--  toggle="true" selected="{paper1.FitMode == FitModeEnum.FITHEIGHT}"" -->
				<!--s:Image source="@Embed('/assets/paper/textselected.png')" buttonMode="true"  click="{paper1.TextSelectEnabled=false}" tabIndex="12" visible="{!ReadOnly &amp;&amp; CursorToolsVisible}" includeInLayout="{!ReadOnly &amp;&amp; CursorToolsVisible}" /-->
				
				<s:TextInput skinClass="com.deodio.elearning.libs.skins.DTextInputSkin"  fontSize="11" height="30" width="90" id="txtSearch" keyDown="txtSearchKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT||paper1.ViewMode == ViewModeEnum.TWOPAGE}"  tabIndex="13" visible="{SearchToolsVisible}" includeInLayout="{SearchToolsVisible}"/>
				<s:Image source="@Embed('/assets/paper/search.png')" buttonMode="true" click="paper1.searchText(txtSearch.text);" tabIndex="14" enabled="{!TrueFullScreenActive}" visible="{SearchToolsVisible}" includeInLayout="{SearchToolsVisible}"/>
				
				<mx:Canvas width="100%" id="cnv_info" horizontalScrollPolicy="off" verticalScrollPolicy="off" height="100%">
					<s:Label id="lblProgress" left="{cnv_info.width-26}" textAlign="center" y="4" fontSize="8" height="19" width="32" text="" tabIndex="0"/>
				</mx:Canvas>
			</mx:HBox>
		</s:VGroup>	
	</s:Group>
	<!-- <s:Rect width="100%" height="2"	>
	<s:fill><s:SolidColor color="0xBEBEBE" /></s:fill>
	</s:Rect> -->
	<ac:Viewer id="paper1" backgroundColor="#000000"
			   onDocumentLoaded="documentLoadedHandler(event)" 
			   onDocumentLoading="papersLoadingHandler(event)"
			   onDocumentLoadedError="documentLoadedErrorHandler(event)"
			   
			   onNoMoreSearchResults="onNoMoreSearchResultsHandler(event)"
			   onLoadingProgress="onDocumentLoadingProgressHandler(event)"
			   onScaleChanged="onScaleChanged(event)"
			   onFitModeChanged="onFitModeChanged(event)"
			   onViewModeChanged="onViewModeChanged(event)"
			   onCurrPageChanged="onCurrPageChanged(event)"
			   onCursorModeChanged="onCursorModeChanged(event)"
			   onExternalLinkClicked="onExternalLinkClickedHandler(event)" 
			   onDocumentPrinted="documentPrintedHandler(event)"
			   onPageLoaded="pageLoadedEventHandler(event)"
			   onPageLoading="pageLoadingEventHandler(event)"
			   onErrorLoadingPage="errorLoadingPageEventHandler(event)"
			    
			   SwfFile="{SwfFile}" 
			   Scale="{Scale}" 
			   ZoomTransition="{ZoomTransition}" 
			   ZoomTime="{ZoomTime}"
			   FitPageOnLoad="{FitPageOnLoad}"
			   FitWidthOnLoad="{FitWidthOnLoad}"
			   ProgressiveLoading="{ProgressiveLoading}"
			   ZoomInterval="{ZoomInterval}"
			   MinZoomSize="{MinZoomSize}"
			   MaxZoomSize="{MaxZoomSize}"
			   SearchMatchAll="{SearchMatchAll}"
			   SearchServiceUrl="{SearchServiceUrl}"
			   height="100%" width="100%" tabIndex="0"
			   />
	<s:Group width="100%" height="10">
		<s:Rect width="100%" height="20">
			<s:fill>
				<s:SolidColor color="0x292929" />
			</s:fill>
		</s:Rect>
	</s:Group>
</paper:IPaperViewer>
